package com.example.geomessaging;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;
import org.json.JSONObject;

import android.os.AsyncTask;
import android.util.Log;

public class WebServerKommunikation extends AsyncTask<Void, Void, Void>{
	final public static String SERVER = "http://10.0.2.2:8080/";
	String email;
	String password;
	String direktive;
	
	public WebServerKommunikation(String email, String password,
			String direktive) {
		super();
		this.email = email;
		this.password = password;
		this.direktive = direktive;
	}

	private static String readAll(Reader rd) throws IOException {
		StringBuilder sb = new StringBuilder();
		int cp;
		while ((cp = rd.read()) != -1) {
			sb.append((char) cp);
		}
		return sb.toString();
	}

	public static JSONObject readJsonFromUrl() throws IOException,
			JSONException {
		String url = SERVER + "/nachrichten.json";
		Log.i("JeadJsonFromUrlMethod", url);
		InputStream is = new URL(url).openStream();
		Log.i("inputStream", is.toString());
		try {
			BufferedReader rd = new BufferedReader(new InputStreamReader(is,
					Charset.forName("UTF-8")));
			String jsonText = readAll(rd);
			Log.i("jsonText", jsonText);
			JSONObject json = new JSONObject(jsonText);
			return json;
		} finally {
			is.close();
		}
	}

	public static boolean doPostAnfrage(String email, String password,
			String direktive) {
		String hash = HashAndSalt.createMd5Hash(password);
		HttpClient httpClient = new DefaultHttpClient();
		HttpPost httpPost = new HttpPost(WebServerKommunikation.SERVER
				+ direktive);
		List<NameValuePair> params = new ArrayList<NameValuePair>();
		params.add(new BasicNameValuePair("mail", email));
		params.add(new BasicNameValuePair("password", hash));
		try {
			httpPost.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));
		} catch (UnsupportedEncodingException e) {
			// writing error to Log
			e.printStackTrace();
		}
		// Making HTTP Request
		try {
			HttpResponse response = httpClient.execute(httpPost);
			HttpEntity respEntity = response.getEntity();

			if (respEntity != null) {
				// EntityUtils to get the reponse content
				String content = EntityUtils.toString(respEntity);
				Log.i("RESPONSE", content);
				if (content.contains("e")) {
					return true;
				}
			}

		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	protected Void doInBackground(Void... arg0) {
		doPostAnfrage(email, password,
				direktive);
		return null;
	}
}
